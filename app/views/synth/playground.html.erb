<div style="padding: 40px; font-family: system-ui;">
  <h1>🎹 Simple Synthesizer</h1>
  
  <!-- Single Note Section -->
  <div style="margin: 20px 0; padding: 20px; background: #f9f9f9; border-radius: 8px;">
    <h2>Single Note</h2>
    <select id="noteSelect" style="padding: 10px; font-size: 18px; margin-right: 20px;"></select>
    
    <button id="playNote" style="padding: 20px 40px; font-size: 24px; cursor: pointer; background: #4CAF50; color: white; border: none; border-radius: 8px;">
      Play Note
    </button>
  </div>
  
  <!-- Chord Section -->
  <div style="margin: 20px 0; padding: 20px; background: #e8f4f8; border-radius: 8px;">
    <h2>Chord (3 Notes)</h2>
    <div style="display: flex; gap: 15px; align-items: center; flex-wrap: wrap;">
      <!-- Note 1 -->
      <div>
        <label>Note 1:</label>
        <select id="chord1" style="padding: 10px; font-size: 16px;"></select>
      </div>
      
      <!-- Note 2 -->
      <div>
        <label>Note 2:</label>
        <select id="chord2" style="padding: 10px; font-size: 16px;"></select>
      </div>
      
      <!-- Note 3 -->
      <div>
        <label>Note 3:</label>
        <select id="chord3" style="padding: 10px; font-size: 16px;"></select>
      </div>
      
      <button id="playChord" style="padding: 20px 40px; font-size: 24px; cursor: pointer; background: #2196F3; color: white; border: none; border-radius: 8px;">
        Play Chord
      </button>
    </div>
  </div>
</div>
  
  <div style="margin: 20px 0;">
    <label>Volume: </label>
    <input type="range" id="volume" min="0" max="100" value="30" />
    <span id="volumeValue">30</span>%
  </div>
  
  <!-- SATB Section (VoxQuad - 4 Measures) -->
  <div style="margin: 20px 0; padding: 20px; background: #f3e5f5; border-radius: 8px;">
    <h2>🎵 VoxQuad SATB (4 Measures)</h2>
    
    <!-- Measure 1 -->
    <div style="margin: 15px 0; padding: 15px; background: rgba(255,255,255,0.3); border-radius: 6px;">
      <h3 style="margin: 0 0 10px 0;">📊 Measure 1</h3>
      <div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; gap: 10px;">
        <div>
          <label><strong>S:</strong></label>
          <select id="m1_soprano" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
        <div>
          <label><strong>A:</strong></label>
          <select id="m1_alto" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
        <div>
          <label><strong>T:</strong></label>
          <select id="m1_tenor" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
        <div>
          <label><strong>B:</strong></label>
          <select id="m1_bass" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
      </div>
    </div>
    
    <!-- Measure 2 -->
    <div style="margin: 15px 0; padding: 15px; background: rgba(255,255,255,0.3); border-radius: 6px;">
      <h3 style="margin: 0 0 10px 0;">📊 Measure 2</h3>
      <div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; gap: 10px;">
        <div>
          <label><strong>S:</strong></label>
          <select id="m2_soprano" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
        <div>
          <label><strong>A:</strong></label>
          <select id="m2_alto" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
        <div>
          <label><strong>T:</strong></label>
          <select id="m2_tenor" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
        <div>
          <label><strong>B:</strong></label>
          <select id="m2_bass" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
      </div>
    </div>
    
    <!-- Measure 3 -->
    <div style="margin: 15px 0; padding: 15px; background: rgba(255,255,255,0.3); border-radius: 6px;">
      <h3 style="margin: 0 0 10px 0;">📊 Measure 3</h3>
      <div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; gap: 10px;">
        <div>
          <label><strong>S:</strong></label>
          <select id="m3_soprano" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
        <div>
          <label><strong>A:</strong></label>
          <select id="m3_alto" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
        <div>
          <label><strong>T:</strong></label>
          <select id="m3_tenor" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
        <div>
          <label><strong>B:</strong></label>
          <select id="m3_bass" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
      </div>
    </div>
    
    <!-- Measure 4 -->
    <div style="margin: 15px 0; padding: 15px; background: rgba(255,255,255,0.3); border-radius: 6px;">
      <h3 style="margin: 0 0 10px 0;">📊 Measure 4</h3>
      <div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; gap: 10px;">
        <div>
          <label><strong>S:</strong></label>
          <select id="m4_soprano" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
        <div>
          <label><strong>A:</strong></label>
          <select id="m4_alto" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
        <div>
          <label><strong>T:</strong></label>
          <select id="m4_tenor" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
        <div>
          <label><strong>B:</strong></label>
          <select id="m4_bass" style="padding: 6px; font-size: 14px; width: 100%;"></select>
        </div>
      </div>
    </div>
    
    <button id="playSATB" style="padding: 20px 40px; font-size: 24px; cursor: pointer; background: #9C27B0; color: white; border: none; border-radius: 8px;">
      Play 4 Measures
    </button>
  </div>

  <div style="margin-top: 40px; padding: 20px; background: #f0f0f0; border-radius: 8px;">
    <h3>📊 What's happening:</h3>
    <p id="status">Click any play button to start</p>
  </div>
</div>

<script>
// Create Web Audio API context
let audioContext = null;

// Note options - reusable across all dropdowns
const noteOptions = [
  {value: "65.41", text: "C2"},
  {value: "73.42", text: "D2"},
  {value: "82.41", text: "E2"},
  {value: "87.31", text: "F2"},
  {value: "98.00", text: "G2"},
  {value: "110.00", text: "A2"},
  {value: "123.47", text: "B2"},
  
  {value: "130.81", text: "C3"},
  {value: "146.83", text: "D3"},
  {value: "164.81", text: "E3"},
  {value: "174.61", text: "F3"},
  {value: "196.00", text: "G3"},
  {value: "220.00", text: "A3"},
  {value: "246.94", text: "B3"},
  
  {value: "261.63", text: "C4"},
  {value: "293.66", text: "D4"},
  {value: "329.63", text: "E4"},
  {value: "349.23", text: "F4"},
  {value: "392.00", text: "G4"},
  {value: "440.00", text: "A4"},
  {value: "493.88", text: "B4"},
  
  {value: "523.25", text: "C5"},
  {value: "587.33", text: "D5"},
  {value: "659.25", text: "E5"},
  {value: "698.46", text: "F5"},
  {value: "783.99", text: "G5"},
  {value: "880.00", text: "A5"},
  {value: "987.77", text: "B5"}
];

// Function to populate dropdown with options
function populateDropdown(selectId, defaultValue = null) {
  const select = document.getElementById(selectId);
  select.innerHTML = '';
  
  noteOptions.forEach(note => {
    const option = document.createElement('option');
    option.value = note.value;
    option.textContent = note.text;
    if (note.value === defaultValue) {
      option.selected = true;
    }
    select.appendChild(option);
  });
}

// Update volume display
document.getElementById('volume').addEventListener('input', (e) => {
  document.getElementById('volumeValue').textContent = e.target.value;
});

// Initialize all dropdowns when page loads
document.addEventListener('DOMContentLoaded', () => {
  // Populate existing dropdowns
  populateDropdown('noteSelect', '261.63'); // C4
  populateDropdown('chord1', '261.63');     // C4
  populateDropdown('chord2', '329.63');     // E4
  populateDropdown('chord3', '392.00');     // G4
  
  // Populate SATB measure dropdowns with appropriate ranges
  // Measure 1 - C Major Chord
  populateDropdown('m1_soprano', '523.25');  // C5
  populateDropdown('m1_alto', '392.00');     // G4  
  populateDropdown('m1_tenor', '329.63');    // E4
  populateDropdown('m1_bass', '261.63');     // C4
  
  // Measure 2 - F Major Chord  
  populateDropdown('m2_soprano', '698.46');  // F5
  populateDropdown('m2_alto', '440.00');     // A4
  populateDropdown('m2_tenor', '349.23');    // F4
  populateDropdown('m2_bass', '174.61');     // F3
  
  // Measure 3 - A minor Chord
  populateDropdown('m3_soprano', '659.25');  // E5
  populateDropdown('m3_alto', '440.00');     // A4
  populateDropdown('m3_tenor', '329.63');    // E4
  populateDropdown('m3_bass', '220.00');     // A3
  
  // Measure 4 - G Major Chord
  populateDropdown('m4_soprano', '783.99');  // G5
  populateDropdown('m4_alto', '493.88');     // B4
  populateDropdown('m4_tenor', '392.00');    // G4
  populateDropdown('m4_bass', '196.00');     // G3
});

// Initialize on first user interaction
// Add chord playback
document.getElementById('playChord').addEventListener('click', () => {
  if (!audioContext) {
    audioContext = new (window.AudioContext || window.webkitAudioContext)();
    document.getElementById('status').textContent = '✅ Audio context initialized!';
  }
  
  // Get frequencies from all three dropdowns
  const freq1 = parseFloat(document.getElementById('chord1').value);
  const freq2 = parseFloat(document.getElementById('chord2').value);
  const freq3 = parseFloat(document.getElementById('chord3').value);
  
  const note1 = document.getElementById('chord1').options[document.getElementById('chord1').selectedIndex].text;
  const note2 = document.getElementById('chord2').options[document.getElementById('chord2').selectedIndex].text;
  const note3 = document.getElementById('chord3').options[document.getElementById('chord3').selectedIndex].text;
  
  playChord([freq1, freq2, freq3], 1.0); // Play for 1 second
  
  // Update status
  document.getElementById('status').innerHTML = 
    `🎵 Playing Chord: ${note1} + ${note2} + ${note3}<br>` +
    `📊 Frequencies: ${freq1} Hz, ${freq2} Hz, ${freq3} Hz<br>` +
    '🎛️ Waveform: Sine (3 oscillators)<br>' +
    '⏱️ Duration: 1.0 seconds';
});

// Add 4-Measure SATB playback
document.getElementById('playSATB').addEventListener('click', () => {
  if (!audioContext) {
    audioContext = new (window.AudioContext || window.webkitAudioContext)();
    document.getElementById('status').textContent = '✅ Audio context initialized!';
  }
  
  play4MeasureSATB();
});

document.getElementById('playNote').addEventListener('click', () => {
  if (!audioContext) {
    audioContext = new (window.AudioContext || window.webkitAudioContext)();
  }
  
  // Get selected note
  const noteSelect = document.getElementById('noteSelect');
  const frequency = parseFloat(noteSelect.value);
  const noteName = noteSelect.options[noteSelect.selectedIndex].text;
  
  playNote(frequency, 0.5);
  
  // Update status
  document.getElementById('status').innerHTML = 
    `🎵 Playing ${noteName} (${frequency} Hz)<br>` +
    '🎛️ Waveform: Sine<br>' +
    '⏱️ Duration: 0.5 seconds';

  document.getElementById('status').style.display = 'block';
});

function playNote(frequency, duration) {
  // Create oscillator (sound source)
  const oscillator = audioContext.createOscillator();
  
  // Create gain node (volume control)
  const gainNode = audioContext.createGain();
  
  // Connect oscillator -> gain -> speakers
  oscillator.connect(gainNode);
  gainNode.connect(audioContext.destination);
  
  // Set frequency (pitch)
  oscillator.frequency.value = frequency;
  
  // Set oscillator type (sine wave for pure tone)
  oscillator.type = 'sine';
  
  // Set volume from slider
  const volume = document.getElementById('volume').value / 100;
  
  // Apply simple ADSR envelope (Attack, Decay, Sustain, Release)
  const now = audioContext.currentTime;
  gainNode.gain.setValueAtTime(0, now);                        // Start at 0
  gainNode.gain.linearRampToValueAtTime(volume, now + 0.01);   // Quick attack (10ms)
  gainNode.gain.linearRampToValueAtTime(volume * 0.8, now + 0.1); // Slight decay
  gainNode.gain.linearRampToValueAtTime(volume * 0.8, now + duration - 0.1); // Sustain
  gainNode.gain.linearRampToValueAtTime(0, now + duration);    // Release
  
  // Start and stop the note
  oscillator.start(now);
  oscillator.stop(now + duration);
  
  // Visual feedback
  document.getElementById('playNote').style.background = '#8BC34A';
  setTimeout(() => {
    document.getElementById('playNote').style.background = '#4CAF50';
  }, duration * 1000);
}

function playChord(frequencies, duration) {
  // Array to store all oscillators for this chord
  const oscillators = [];
  const gainNodes = [];
  
  // Create a master gain node for the entire chord
  const masterGain = audioContext.createGain();
  masterGain.connect(audioContext.destination);
  
  // Get volume from slider
  const volume = document.getElementById('volume').value / 100;
  
  // Create oscillator for each frequency
  frequencies.forEach(frequency => {
    // Create oscillator (sound source)
    const oscillator = audioContext.createOscillator();
    
    // Create individual gain node for this note
    const gainNode = audioContext.createGain();
    
    // Connect: oscillator -> individual gain -> master gain -> speakers
    oscillator.connect(gainNode);
    gainNode.connect(masterGain);
    
    // Set frequency and waveform
    oscillator.frequency.value = frequency;
    oscillator.type = 'sine';
    
    // Reduce individual gain to prevent clipping (volume / number of notes)
    const individualGain = 1.0 / frequencies.length;
    gainNode.gain.value = individualGain;
    
    // Store references
    oscillators.push(oscillator);
    gainNodes.push(gainNode);
  });
  
  // Apply ADSR envelope to master gain
  const now = audioContext.currentTime;
  masterGain.gain.setValueAtTime(0, now);                           // Start at 0
  masterGain.gain.linearRampToValueAtTime(volume, now + 0.02);      // Quick attack (20ms)
  masterGain.gain.linearRampToValueAtTime(volume * 0.8, now + 0.1); // Slight decay
  masterGain.gain.linearRampToValueAtTime(volume * 0.8, now + duration - 0.1); // Sustain
  masterGain.gain.linearRampToValueAtTime(0, now + duration);       // Release
  
  // Start all oscillators at the same time
  oscillators.forEach(oscillator => {
    oscillator.start(now);
    oscillator.stop(now + duration);
  });
  
  // Visual feedback
  document.getElementById('playChord').style.background = '#1976D2';
  setTimeout(() => {
    document.getElementById('playChord').style.background = '#2196F3';
  }, duration * 1000);
}

function playSATB(frequencies, duration, startTime = 0) {
  // Array to store all oscillators for SATB
  const oscillators = [];
  const gainNodes = [];
  
  // Create a master gain node for the entire SATB harmony
  const masterGain = audioContext.createGain();
  masterGain.connect(audioContext.destination);
  
  // Get volume from slider
  const volume = document.getElementById('volume').value / 100;
  
  // Create oscillator for each SATB voice
  frequencies.forEach((frequency, index) => {
    // Create oscillator (sound source)
    const oscillator = audioContext.createOscillator();
    
    // Create individual gain node for this voice
    const gainNode = audioContext.createGain();
    
    // Connect: oscillator -> individual gain -> master gain -> speakers
    oscillator.connect(gainNode);
    gainNode.connect(masterGain);
    
    // Set frequency and waveform
    oscillator.frequency.value = frequency;
    oscillator.type = 'sine';
    
    // Individual voice gain (equal volume for each voice)
    const individualGain = 1.0 / frequencies.length;
    gainNode.gain.value = individualGain;
    
    // Store references
    oscillators.push(oscillator);
    gainNodes.push(gainNode);
  });
  
  // Apply ADSR envelope to master gain
  const now = audioContext.currentTime + startTime;
  masterGain.gain.setValueAtTime(0, now);                           // Start at 0
  masterGain.gain.linearRampToValueAtTime(volume, now + 0.05);      // Attack (50ms)
  masterGain.gain.linearRampToValueAtTime(volume * 0.9, now + 0.1); // Decay
  masterGain.gain.linearRampToValueAtTime(volume * 0.9, now + duration - 0.1); // Sustain
  masterGain.gain.linearRampToValueAtTime(0, now + duration);       // Release
  
  // Start all oscillators at scheduled time
  oscillators.forEach(oscillator => {
    oscillator.start(now);
    oscillator.stop(now + duration);
  });
}

function play4MeasureSATB() {
  const measureDuration = 1.2; // 1.2 seconds per measure
  
  // Get all measure data
  const measures = [];
  for (let i = 1; i <= 4; i++) {
    const soprano = parseFloat(document.getElementById(`m${i}_soprano`).value);
    const alto = parseFloat(document.getElementById(`m${i}_alto`).value);
    const tenor = parseFloat(document.getElementById(`m${i}_tenor`).value);
    const bass = parseFloat(document.getElementById(`m${i}_bass`).value);
    
    const sopranoNote = document.getElementById(`m${i}_soprano`).options[document.getElementById(`m${i}_soprano`).selectedIndex].text;
    const altoNote = document.getElementById(`m${i}_alto`).options[document.getElementById(`m${i}_alto`).selectedIndex].text;
    const tenorNote = document.getElementById(`m${i}_tenor`).options[document.getElementById(`m${i}_tenor`).selectedIndex].text;
    const bassNote = document.getElementById(`m${i}_bass`).options[document.getElementById(`m${i}_bass`).selectedIndex].text;
    
    measures.push({
      frequencies: [soprano, alto, tenor, bass],
      notes: [sopranoNote, altoNote, tenorNote, bassNote],
      measure: i
    });
  }
  
  // Schedule all measures using Web Audio API timing
  measures.forEach((measure, index) => {
    const startTime = index * measureDuration;
    playSATB(measure.frequencies, measureDuration, startTime);
  });
  
  // Update status for each measure with timing
  document.getElementById('status').innerHTML = 
    `🎵 Playing 4-Measure SATB Sequence<br>` +
    `📊 Total Duration: ${(measureDuration * 4).toFixed(1)} seconds<br>` +
    '🎼 Watch the progression: C → F → Am → G';
  
  // Visual feedback and measure progression display
  document.getElementById('playSATB').style.background = '#7B1FA2';
  
  // Update status for each measure as it plays
  measures.forEach((measure, index) => {
    setTimeout(() => {
      document.getElementById('status').innerHTML = 
        `🎵 Playing Measure ${measure.measure}<br>` +
        `S: ${measure.notes[0]} | A: ${measure.notes[1]} | T: ${measure.notes[2]} | B: ${measure.notes[3]}<br>` +
        `Progress: ${index + 1}/4 measures`;
    }, index * measureDuration * 1000);
  });
  
  // Reset button and final status
  setTimeout(() => {
    document.getElementById('playSATB').style.background = '#9C27B0';
    document.getElementById('status').innerHTML = 
      '✅ 4-Measure SATB Sequence Complete<br>' +
      '🎼 Chord Progression: C Major → F Major → A minor → G Major';
  }, measureDuration * 4 * 1000);
}
</script>
