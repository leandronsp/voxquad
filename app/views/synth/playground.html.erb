<div style="padding: 40px; font-family: system-ui;">
  <h1>üéπ Simple Synthesizer</h1>
  
  <!-- Single Note Section -->
  <div style="margin: 20px 0; padding: 20px; background: #f9f9f9; border-radius: 8px;">
    <h2>Single Note</h2>
    <select id="noteSelect" style="padding: 10px; font-size: 18px; margin-right: 20px;"></select>
    
    <button id="playNote" style="padding: 20px 40px; font-size: 24px; cursor: pointer; background: #4CAF50; color: white; border: none; border-radius: 8px;">
      Play Note
    </button>
  </div>
  
  <!-- Chord Section -->
  <div style="margin: 20px 0; padding: 20px; background: #e8f4f8; border-radius: 8px;">
    <h2>Chord (3 Notes)</h2>
    <div style="display: flex; gap: 15px; align-items: center; flex-wrap: wrap;">
      <!-- Note 1 -->
      <div>
        <label>Note 1:</label>
        <select id="chord1" style="padding: 10px; font-size: 16px;"></select>
      </div>
      
      <!-- Note 2 -->
      <div>
        <label>Note 2:</label>
        <select id="chord2" style="padding: 10px; font-size: 16px;"></select>
      </div>
      
      <!-- Note 3 -->
      <div>
        <label>Note 3:</label>
        <select id="chord3" style="padding: 10px; font-size: 16px;"></select>
      </div>
      
      <button id="playChord" style="padding: 20px 40px; font-size: 24px; cursor: pointer; background: #2196F3; color: white; border: none; border-radius: 8px;">
        Play Chord
      </button>
    </div>
  </div>
</div>
  
  <div style="margin: 20px 0;">
    <label>Volume: </label>
    <input type="range" id="volume" min="0" max="100" value="30" />
    <span id="volumeValue">30</span>%
  </div>
  
  <!-- SATB Section (VoxQuad) -->
  <div style="margin: 20px 0; padding: 20px; background: #f3e5f5; border-radius: 8px;">
    <h2>üéµ VoxQuad SATB (4 Voices)</h2>
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 20px;">
      <!-- Soprano -->
      <div>
        <label><strong>Soprano (S):</strong></label>
        <select id="soprano" style="padding: 8px; font-size: 16px; width: 100%;"></select>
      </div>
      
      <!-- Alto -->
      <div>
        <label><strong>Alto (A):</strong></label>
        <select id="alto" style="padding: 8px; font-size: 16px; width: 100%;"></select>
      </div>
      
      <!-- Tenor -->
      <div>
        <label><strong>Tenor (T):</strong></label>
        <select id="tenor" style="padding: 8px; font-size: 16px; width: 100%;"></select>
      </div>
      
      <!-- Bass -->
      <div>
        <label><strong>Bass (B):</strong></label>
        <select id="bass" style="padding: 8px; font-size: 16px; width: 100%;"></select>
      </div>
    </div>
    
    <button id="playSATB" style="padding: 20px 40px; font-size: 24px; cursor: pointer; background: #9C27B0; color: white; border: none; border-radius: 8px;">
      Play SATB
    </button>
  </div>

  <div style="margin-top: 40px; padding: 20px; background: #f0f0f0; border-radius: 8px;">
    <h3>üìä What's happening:</h3>
    <p id="status">Click any play button to start</p>
  </div>
</div>

<script>
// Create Web Audio API context
let audioContext = null;

// Note options - reusable across all dropdowns
const noteOptions = [
  {value: "65.41", text: "C2"},
  {value: "73.42", text: "D2"},
  {value: "82.41", text: "E2"},
  {value: "87.31", text: "F2"},
  {value: "98.00", text: "G2"},
  {value: "110.00", text: "A2"},
  {value: "123.47", text: "B2"},
  
  {value: "130.81", text: "C3"},
  {value: "146.83", text: "D3"},
  {value: "164.81", text: "E3"},
  {value: "174.61", text: "F3"},
  {value: "196.00", text: "G3"},
  {value: "220.00", text: "A3"},
  {value: "246.94", text: "B3"},
  
  {value: "261.63", text: "C4"},
  {value: "293.66", text: "D4"},
  {value: "329.63", text: "E4"},
  {value: "349.23", text: "F4"},
  {value: "392.00", text: "G4"},
  {value: "440.00", text: "A4"},
  {value: "493.88", text: "B4"},
  
  {value: "523.25", text: "C5"},
  {value: "587.33", text: "D5"},
  {value: "659.25", text: "E5"},
  {value: "698.46", text: "F5"},
  {value: "783.99", text: "G5"},
  {value: "880.00", text: "A5"},
  {value: "987.77", text: "B5"}
];

// Function to populate dropdown with options
function populateDropdown(selectId, defaultValue = null) {
  const select = document.getElementById(selectId);
  select.innerHTML = '';
  
  noteOptions.forEach(note => {
    const option = document.createElement('option');
    option.value = note.value;
    option.textContent = note.text;
    if (note.value === defaultValue) {
      option.selected = true;
    }
    select.appendChild(option);
  });
}

// Update volume display
document.getElementById('volume').addEventListener('input', (e) => {
  document.getElementById('volumeValue').textContent = e.target.value;
});

// Initialize all dropdowns when page loads
document.addEventListener('DOMContentLoaded', () => {
  // Populate existing dropdowns
  populateDropdown('noteSelect', '261.63'); // C4
  populateDropdown('chord1', '261.63');     // C4
  populateDropdown('chord2', '329.63');     // E4
  populateDropdown('chord3', '392.00');     // G4
  
  // Populate SATB dropdowns with appropriate ranges
  populateDropdown('soprano', '523.25');    // C5 (high range)
  populateDropdown('alto', '392.00');       // G4 (mid-high range)
  populateDropdown('tenor', '261.63');      // C4 (mid range)
  populateDropdown('bass', '130.81');       // C3 (low range)
});

// Initialize on first user interaction
// Add chord playback
document.getElementById('playChord').addEventListener('click', () => {
  if (!audioContext) {
    audioContext = new (window.AudioContext || window.webkitAudioContext)();
    document.getElementById('status').textContent = '‚úÖ Audio context initialized!';
  }
  
  // Get frequencies from all three dropdowns
  const freq1 = parseFloat(document.getElementById('chord1').value);
  const freq2 = parseFloat(document.getElementById('chord2').value);
  const freq3 = parseFloat(document.getElementById('chord3').value);
  
  const note1 = document.getElementById('chord1').options[document.getElementById('chord1').selectedIndex].text;
  const note2 = document.getElementById('chord2').options[document.getElementById('chord2').selectedIndex].text;
  const note3 = document.getElementById('chord3').options[document.getElementById('chord3').selectedIndex].text;
  
  playChord([freq1, freq2, freq3], 1.0); // Play for 1 second
  
  // Update status
  document.getElementById('status').innerHTML = 
    `üéµ Playing Chord: ${note1} + ${note2} + ${note3}<br>` +
    `üìä Frequencies: ${freq1} Hz, ${freq2} Hz, ${freq3} Hz<br>` +
    'üéõÔ∏è Waveform: Sine (3 oscillators)<br>' +
    '‚è±Ô∏è Duration: 1.0 seconds';
});

// Add SATB playback
document.getElementById('playSATB').addEventListener('click', () => {
  if (!audioContext) {
    audioContext = new (window.AudioContext || window.webkitAudioContext)();
    document.getElementById('status').textContent = '‚úÖ Audio context initialized!';
  }
  
  // Get frequencies from all four SATB voices
  const sopranoFreq = parseFloat(document.getElementById('soprano').value);
  const altoFreq = parseFloat(document.getElementById('alto').value);
  const tenorFreq = parseFloat(document.getElementById('tenor').value);
  const bassFreq = parseFloat(document.getElementById('bass').value);
  
  const sopranoNote = document.getElementById('soprano').options[document.getElementById('soprano').selectedIndex].text;
  const altoNote = document.getElementById('alto').options[document.getElementById('alto').selectedIndex].text;
  const tenorNote = document.getElementById('tenor').options[document.getElementById('tenor').selectedIndex].text;
  const bassNote = document.getElementById('bass').options[document.getElementById('bass').selectedIndex].text;
  
  playSATB([sopranoFreq, altoFreq, tenorFreq, bassFreq], 1.5); // Play for 1.5 seconds
  
  // Update status
  document.getElementById('status').innerHTML = 
    `üéµ Playing SATB Harmony<br>` +
    `üéº S: ${sopranoNote} (${sopranoFreq} Hz)<br>` +
    `üéº A: ${altoNote} (${altoFreq} Hz)<br>` +
    `üéº T: ${tenorNote} (${tenorFreq} Hz)<br>` +
    `üéº B: ${bassNote} (${bassFreq} Hz)<br>` +
    'üéõÔ∏è 4-Voice Harmony ‚Ä¢ Duration: 1.5 seconds';
});

document.getElementById('playNote').addEventListener('click', () => {
  if (!audioContext) {
    audioContext = new (window.AudioContext || window.webkitAudioContext)();
  }
  
  // Get selected note
  const noteSelect = document.getElementById('noteSelect');
  const frequency = parseFloat(noteSelect.value);
  const noteName = noteSelect.options[noteSelect.selectedIndex].text;
  
  playNote(frequency, 0.5);
  
  // Update status
  document.getElementById('status').innerHTML = 
    `üéµ Playing ${noteName} (${frequency} Hz)<br>` +
    'üéõÔ∏è Waveform: Sine<br>' +
    '‚è±Ô∏è Duration: 0.5 seconds';

  document.getElementById('status').style.display = 'block';
});

function playNote(frequency, duration) {
  // Create oscillator (sound source)
  const oscillator = audioContext.createOscillator();
  
  // Create gain node (volume control)
  const gainNode = audioContext.createGain();
  
  // Connect oscillator -> gain -> speakers
  oscillator.connect(gainNode);
  gainNode.connect(audioContext.destination);
  
  // Set frequency (pitch)
  oscillator.frequency.value = frequency;
  
  // Set oscillator type (sine wave for pure tone)
  oscillator.type = 'sine';
  
  // Set volume from slider
  const volume = document.getElementById('volume').value / 100;
  
  // Apply simple ADSR envelope (Attack, Decay, Sustain, Release)
  const now = audioContext.currentTime;
  gainNode.gain.setValueAtTime(0, now);                        // Start at 0
  gainNode.gain.linearRampToValueAtTime(volume, now + 0.01);   // Quick attack (10ms)
  gainNode.gain.linearRampToValueAtTime(volume * 0.8, now + 0.1); // Slight decay
  gainNode.gain.linearRampToValueAtTime(volume * 0.8, now + duration - 0.1); // Sustain
  gainNode.gain.linearRampToValueAtTime(0, now + duration);    // Release
  
  // Start and stop the note
  oscillator.start(now);
  oscillator.stop(now + duration);
  
  // Visual feedback
  document.getElementById('playNote').style.background = '#8BC34A';
  setTimeout(() => {
    document.getElementById('playNote').style.background = '#4CAF50';
  }, duration * 1000);
}

function playChord(frequencies, duration) {
  // Array to store all oscillators for this chord
  const oscillators = [];
  const gainNodes = [];
  
  // Create a master gain node for the entire chord
  const masterGain = audioContext.createGain();
  masterGain.connect(audioContext.destination);
  
  // Get volume from slider
  const volume = document.getElementById('volume').value / 100;
  
  // Create oscillator for each frequency
  frequencies.forEach(frequency => {
    // Create oscillator (sound source)
    const oscillator = audioContext.createOscillator();
    
    // Create individual gain node for this note
    const gainNode = audioContext.createGain();
    
    // Connect: oscillator -> individual gain -> master gain -> speakers
    oscillator.connect(gainNode);
    gainNode.connect(masterGain);
    
    // Set frequency and waveform
    oscillator.frequency.value = frequency;
    oscillator.type = 'sine';
    
    // Reduce individual gain to prevent clipping (volume / number of notes)
    const individualGain = 1.0 / frequencies.length;
    gainNode.gain.value = individualGain;
    
    // Store references
    oscillators.push(oscillator);
    gainNodes.push(gainNode);
  });
  
  // Apply ADSR envelope to master gain
  const now = audioContext.currentTime;
  masterGain.gain.setValueAtTime(0, now);                           // Start at 0
  masterGain.gain.linearRampToValueAtTime(volume, now + 0.02);      // Quick attack (20ms)
  masterGain.gain.linearRampToValueAtTime(volume * 0.8, now + 0.1); // Slight decay
  masterGain.gain.linearRampToValueAtTime(volume * 0.8, now + duration - 0.1); // Sustain
  masterGain.gain.linearRampToValueAtTime(0, now + duration);       // Release
  
  // Start all oscillators at the same time
  oscillators.forEach(oscillator => {
    oscillator.start(now);
    oscillator.stop(now + duration);
  });
  
  // Visual feedback
  document.getElementById('playChord').style.background = '#1976D2';
  setTimeout(() => {
    document.getElementById('playChord').style.background = '#2196F3';
  }, duration * 1000);
}

function playSATB(frequencies, duration) {
  // Array to store all oscillators for SATB
  const oscillators = [];
  const gainNodes = [];
  
  // Create a master gain node for the entire SATB harmony
  const masterGain = audioContext.createGain();
  masterGain.connect(audioContext.destination);
  
  // Get volume from slider
  const volume = document.getElementById('volume').value / 100;
  
  // Create oscillator for each SATB voice
  frequencies.forEach((frequency, index) => {
    // Create oscillator (sound source)
    const oscillator = audioContext.createOscillator();
    
    // Create individual gain node for this voice
    const gainNode = audioContext.createGain();
    
    // Connect: oscillator -> individual gain -> master gain -> speakers
    oscillator.connect(gainNode);
    gainNode.connect(masterGain);
    
    // Set frequency and waveform
    oscillator.frequency.value = frequency;
    oscillator.type = 'sine';
    
    // Individual voice gain (equal volume for each voice)
    const individualGain = 1.0 / frequencies.length;
    gainNode.gain.value = individualGain;
    
    // Store references
    oscillators.push(oscillator);
    gainNodes.push(gainNode);
  });
  
  // Apply ADSR envelope to master gain (longer for SATB harmony)
  const now = audioContext.currentTime;
  masterGain.gain.setValueAtTime(0, now);                           // Start at 0
  masterGain.gain.linearRampToValueAtTime(volume, now + 0.05);      // Slower attack (50ms)
  masterGain.gain.linearRampToValueAtTime(volume * 0.9, now + 0.2); // Gentle decay
  masterGain.gain.linearRampToValueAtTime(volume * 0.9, now + duration - 0.3); // Long sustain
  masterGain.gain.linearRampToValueAtTime(0, now + duration);       // Gentle release
  
  // Start all oscillators at exactly the same time
  oscillators.forEach(oscillator => {
    oscillator.start(now);
    oscillator.stop(now + duration);
  });
  
  // Visual feedback
  document.getElementById('playSATB').style.background = '#7B1FA2';
  setTimeout(() => {
    document.getElementById('playSATB').style.background = '#9C27B0';
  }, duration * 1000);
}
</script>
