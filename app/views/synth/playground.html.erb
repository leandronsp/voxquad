<div style="padding: 40px; font-family: system-ui; max-width: 1200px; margin: 0 auto;">
  <h1 style="text-align: center; color: #333;">üéµ VoxQuad SATB Matrix</h1>
  
  <!-- SATB Matrix -->
  <div style="margin: 30px 0; padding: 30px; background: #f8f4ff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
    
    <!-- Voice Controls -->
    <div style="margin-bottom: 20px; display: grid; grid-template-columns: 120px 1fr 1fr 1fr 1fr; gap: 15px; align-items: center;">
      <div></div>
      <div style="text-align: center;">
        <h3 style="margin: 0; color: #666;">Measure 1</h3>
      </div>
      <div style="text-align: center;">
        <h3 style="margin: 0; color: #666;">Measure 2</h3>
      </div>
      <div style="text-align: center;">
        <h3 style="margin: 0; color: #666;">Measure 3</h3>
      </div>
      <div style="text-align: center;">
        <h3 style="margin: 0; color: #666;">Measure 4</h3>
      </div>
    </div>
    
    <!-- Soprano Row -->
    <div style="margin-bottom: 15px; display: grid; grid-template-columns: 120px 1fr 1fr 1fr 1fr; gap: 15px; align-items: center; padding: 10px; background: rgba(255, 192, 203, 0.2); border-radius: 8px;">
      <div style="display: flex; align-items: center; gap: 10px;">
        <strong style="color: #d63384;">Soprano</strong>
        <input type="range" id="sopranoGain" min="0" max="100" value="80" style="width: 50px;" title="Soprano Volume">
      </div>
      <select id="m1_soprano" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
      <select id="m2_soprano" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
      <select id="m3_soprano" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
      <select id="m4_soprano" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
    </div>
    
    <!-- Alto Row -->
    <div style="margin-bottom: 15px; display: grid; grid-template-columns: 120px 1fr 1fr 1fr 1fr; gap: 15px; align-items: center; padding: 10px; background: rgba(255, 193, 7, 0.2); border-radius: 8px;">
      <div style="display: flex; align-items: center; gap: 10px;">
        <strong style="color: #fd7e14;">Alto</strong>
        <input type="range" id="altoGain" min="0" max="100" value="70" style="width: 50px;" title="Alto Volume">
      </div>
      <select id="m1_alto" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
      <select id="m2_alto" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
      <select id="m3_alto" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
      <select id="m4_alto" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
    </div>
    
    <!-- Tenor Row -->
    <div style="margin-bottom: 15px; display: grid; grid-template-columns: 120px 1fr 1fr 1fr 1fr; gap: 15px; align-items: center; padding: 10px; background: rgba(25, 135, 84, 0.2); border-radius: 8px;">
      <div style="display: flex; align-items: center; gap: 10px;">
        <strong style="color: #198754;">Tenor</strong>
        <input type="range" id="tenorGain" min="0" max="100" value="70" style="width: 50px;" title="Tenor Volume">
      </div>
      <select id="m1_tenor" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
      <select id="m2_tenor" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
      <select id="m3_tenor" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
      <select id="m4_tenor" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
    </div>
    
    <!-- Bass Row -->
    <div style="margin-bottom: 20px; display: grid; grid-template-columns: 120px 1fr 1fr 1fr 1fr; gap: 15px; align-items: center; padding: 10px; background: rgba(13, 110, 253, 0.2); border-radius: 8px;">
      <div style="display: flex; align-items: center; gap: 10px;">
        <strong style="color: #0d6efd;">Bass</strong>
        <input type="range" id="bassGain" min="0" max="100" value="90" style="width: 50px;" title="Bass Volume">
      </div>
      <select id="m1_bass" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
      <select id="m2_bass" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
      <select id="m3_bass" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
      <select id="m4_bass" style="padding: 8px; font-size: 16px; width: 100%; border-radius: 4px;"></select>
    </div>
    
    <!-- Controls -->
    <div style="text-align: center; border-top: 2px solid rgba(156, 39, 176, 0.3); padding-top: 20px;">
      <div style="margin-bottom: 15px;">
        <label style="margin-right: 10px; font-weight: bold;">Master Volume:</label>
        <input type="range" id="masterVolume" min="0" max="100" value="40" style="width: 150px;">
        <span id="masterVolumeValue" style="margin-left: 10px;">40%</span>
      </div>
      
      <button id="playSATB" style="padding: 15px 50px; font-size: 20px; cursor: pointer; background: #9C27B0; color: white; border: none; border-radius: 8px; box-shadow: 0 4px 8px rgba(156, 39, 176, 0.3);">
        ‚ñ∂Ô∏è Play Composition
      </button>
    </div>
  </div>
</div>

<script>
// Create Web Audio API context
let audioContext = null;

// Musical note system using equal temperament
// Formula: f = 440 √ó 2^((midiNote - 69) / 12)
// A4 = 440 Hz = MIDI note 69

// Chromatic note names and their MIDI numbers
const CHROMATIC_NOTES = [
  // Octave 2 (MIDI 36-47)
  {name: 'C2', midi: 36}, {name: 'C#2/Db2', midi: 37}, {name: 'D2', midi: 38}, {name: 'D#2/Eb2', midi: 39},
  {name: 'E2', midi: 40}, {name: 'F2', midi: 41}, {name: 'F#2/Gb2', midi: 42}, {name: 'G2', midi: 43},
  {name: 'G#2/Ab2', midi: 44}, {name: 'A2', midi: 45}, {name: 'A#2/Bb2', midi: 46}, {name: 'B2', midi: 47},
  
  // Octave 3 (MIDI 48-59)
  {name: 'C3', midi: 48}, {name: 'C#3/Db3', midi: 49}, {name: 'D3', midi: 50}, {name: 'D#3/Eb3', midi: 51},
  {name: 'E3', midi: 52}, {name: 'F3', midi: 53}, {name: 'F#3/Gb3', midi: 54}, {name: 'G3', midi: 55},
  {name: 'G#3/Ab3', midi: 56}, {name: 'A3', midi: 57}, {name: 'A#3/Bb3', midi: 58}, {name: 'B3', midi: 59},
  
  // Octave 4 (MIDI 60-71)
  {name: 'C4', midi: 60}, {name: 'C#4/Db4', midi: 61}, {name: 'D4', midi: 62}, {name: 'D#4/Eb4', midi: 63},
  {name: 'E4', midi: 64}, {name: 'F4', midi: 65}, {name: 'F#4/Gb4', midi: 66}, {name: 'G4', midi: 67},
  {name: 'G#4/Ab4', midi: 68}, {name: 'A4', midi: 69}, {name: 'A#4/Bb4', midi: 70}, {name: 'B4', midi: 71},
  
  // Octave 5 (MIDI 72-83)
  {name: 'C5', midi: 72}, {name: 'C#5/Db5', midi: 73}, {name: 'D5', midi: 74}, {name: 'D#5/Eb5', midi: 75},
  {name: 'E5', midi: 76}, {name: 'F5', midi: 77}, {name: 'F#5/Gb5', midi: 78}, {name: 'G5', midi: 79},
  {name: 'G#5/Ab5', midi: 80}, {name: 'A5', midi: 81}, {name: 'A#5/Bb5', midi: 82}, {name: 'B5', midi: 83}
];

// Chord tone mapping for common seventh chords (showing relationship to root)
const CHORD_TONES = {
  // Major 7th chords
  'CMaj': { root: 'C', third: 'E', fifth: 'G', seventh: 'B' },
  'DMaj': { root: 'D', third: 'F#/Gb', fifth: 'A', seventh: 'C#/Db' },
  'EMaj': { root: 'E', third: 'G#/Ab', fifth: 'B', seventh: 'D#/Eb' },
  'FMaj': { root: 'F', third: 'A', fifth: 'C', seventh: 'E' },
  'GMaj': { root: 'G', third: 'B', fifth: 'D', seventh: 'F#/Gb' },
  'AMaj': { root: 'A', third: 'C#/Db', fifth: 'E', seventh: 'G#/Ab' },
  'BMaj': { root: 'B', third: 'D#/Eb', fifth: 'F#/Gb', seventh: 'A#/Bb' },
  
  // Dominant 7th chords (‚ô≠7)
  'C7': { root: 'C', third: 'E', fifth: 'G', seventh: 'A#/Bb' },
  'D7': { root: 'D', third: 'F#/Gb', fifth: 'A', seventh: 'C' },
  'E7': { root: 'E', third: 'G#/Ab', fifth: 'B', seventh: 'D' },
  'F7': { root: 'F', third: 'A', fifth: 'C', seventh: 'D#/Eb' },
  'G7': { root: 'G', third: 'B', fifth: 'D', seventh: 'F' },
  'A7': { root: 'A', third: 'C#/Db', fifth: 'E', seventh: 'G' },
  'B7': { root: 'B', third: 'D#/Eb', fifth: 'F#/Gb', seventh: 'A' }
};


// Calculate frequency from MIDI note number using equal temperament
function midiToFrequency(midiNote) {
  return 440 * Math.pow(2, (midiNote - 69) / 12);
}

// Create note-to-frequency mapping
const NOTE_FREQUENCIES = {};
CHROMATIC_NOTES.forEach(note => {
  const frequency = midiToFrequency(note.midi);
  NOTE_FREQUENCIES[note.name] = frequency;
});

// Generate note options from chromatic notes  
const noteOptions = CHROMATIC_NOTES.map(note => ({
  value: midiToFrequency(note.midi).toFixed(2),
  text: note.name
}));

// Function to populate dropdown with options
function populateDropdown(selectId, defaultValue = null) {
  const select = document.getElementById(selectId);
  select.innerHTML = '';
  
  noteOptions.forEach(note => {
    const option = document.createElement('option');
    option.value = note.value;
    option.textContent = note.text;
    if (note.value === defaultValue) {
      option.selected = true;
    }
    select.appendChild(option);
  });
}

// Helper function to get frequency by note name
function getFrequencyByNote(noteName) {
  return NOTE_FREQUENCIES[noteName].toFixed(2);
}

// Initialize all dropdowns when page loads
document.addEventListener('DOMContentLoaded', () => {
  // Populate SATB measure dropdowns with matrix:
  // M1: C4-E4-G3-C3 | M2: F4-C4-A3-F3 | M3: F4-D4-B3-G3 | M4: G4-E4-C4-C3
  
  // Measure 1: C4-E4-G3-C3 (C Major)
  populateDropdown('m1_soprano', getFrequencyByNote('C4'));
  populateDropdown('m1_alto', getFrequencyByNote('E4'));
  populateDropdown('m1_tenor', getFrequencyByNote('G3'));
  populateDropdown('m1_bass', getFrequencyByNote('C3'));
  
  // Measure 2: F4-C4-A3-F3 (F Major)
  populateDropdown('m2_soprano', getFrequencyByNote('F4'));
  populateDropdown('m2_alto', getFrequencyByNote('C4'));
  populateDropdown('m2_tenor', getFrequencyByNote('A3'));
  populateDropdown('m2_bass', getFrequencyByNote('F3'));
  
  // Measure 3: F4-D4-B3-G3 (G7)
  populateDropdown('m3_soprano', getFrequencyByNote('F4'));
  populateDropdown('m3_alto', getFrequencyByNote('D4'));
  populateDropdown('m3_tenor', getFrequencyByNote('B3'));
  populateDropdown('m3_bass', getFrequencyByNote('G3'));
  
  // Measure 4: G4-E4-C4-C3 (C Major)
  populateDropdown('m4_soprano', getFrequencyByNote('G4'));
  populateDropdown('m4_alto', getFrequencyByNote('E4'));
  populateDropdown('m4_tenor', getFrequencyByNote('C4'));
  populateDropdown('m4_bass', getFrequencyByNote('C3'));
});

// Update master volume display
document.getElementById('masterVolume').addEventListener('input', (e) => {
  document.getElementById('masterVolumeValue').textContent = e.target.value + '%';
});

// Add 4-Measure SATB playback
document.getElementById('playSATB').addEventListener('click', () => {
  if (!audioContext) {
    audioContext = new (window.AudioContext || window.webkitAudioContext)();
  }
  
  play4MeasureSATB();
});


// Vowel formant frequencies (F1, F2) based on acoustic research
const VOWEL_FORMANTS = {
  a: [827, 1542],  // "bat" - open central vowel
  e: [430, 2336],  // "bet" - mid front vowel  
  i: [100, 3379],  // "beet" - close front vowel
  o: [562, 3577],  // "bought" - mid back vowel
  u: [200, 1500]   // "boot" - close back vowel
};

// Voice-specific formant frequency scaling
const VOICE_SCALING = {
  soprano: 1.2,   // Higher formants
  alto: 1.1,      // Slightly higher
  tenor: 1.0,     // Base frequencies  
  bass: 0.85      // Lower formants
};

// Create formant synthesizer based on acoustic principles
function createFormantVoice(frequency, voiceType, vowel = 'a') {
  // Get formant frequencies for the vowel
  const baseFormants = VOWEL_FORMANTS[vowel] || VOWEL_FORMANTS.a;
  const scalingFactor = VOICE_SCALING[voiceType] || 1.0;
  
  // Scale formants for voice type
  const f1 = baseFormants[0] * scalingFactor;
  const f2 = baseFormants[1] * scalingFactor;
  
  // Single sawtooth source (like vocal cords)
  const source = audioContext.createOscillator();
  source.frequency.value = frequency;
  source.type = 'sawtooth';
  
  // Create resonant formant filters in SERIES (not parallel!)
  // This simulates how vocal tract actually works
  const formant1 = audioContext.createBiquadFilter();
  formant1.type = 'peaking'; // Use peaking filter for resonance
  formant1.frequency.value = f1;
  formant1.Q.value = 10; // High Q for strong resonance
  formant1.gain.value = 12; // Boost at this frequency
  
  const formant2 = audioContext.createBiquadFilter();
  formant2.type = 'peaking';
  formant2.frequency.value = f2;
  formant2.Q.value = 15; // Even higher Q for F2
  formant2.gain.value = 8; // Less boost than F1
  
  // Lowpass to remove harsh high frequencies
  const lowpass = audioContext.createBiquadFilter();
  lowpass.type = 'lowpass';
  lowpass.frequency.value = 3000;
  lowpass.Q.value = 1;
  
  // Output gain control
  const outputGain = audioContext.createGain();
  outputGain.gain.value = 0.1; // Much quieter for peaking filters
  
  // Connect in series: source -> formant1 -> formant2 -> lowpass -> output
  source.connect(formant1);
  formant1.connect(formant2);
  formant2.connect(lowpass);
  lowpass.connect(outputGain);
  
  return { 
    oscillator: source,
    outputNode: outputGain 
  };
}

function playSATB(frequencies, duration, startTime = 0, voiceGains = [1, 1, 1, 1]) {
  const voices = [];
  const gainNodes = [];
  
  // Create master gain
  const masterGain = audioContext.createGain();
  masterGain.connect(audioContext.destination);
  
  const masterVolume = document.getElementById('masterVolume').value / 100;
  const voiceNames = ['soprano', 'alto', 'tenor', 'bass'];
  
  // Create formant voice for each SATB part
  frequencies.forEach((frequency, index) => {
    const voice = createFormantVoice(frequency, voiceNames[index], 'a');
    const gainNode = audioContext.createGain();
    
    // Connect voice -> gain -> master
    voice.outputNode.connect(gainNode);
    gainNode.connect(masterGain);
    
    // Set individual voice gain
    const voiceGainSlider = document.getElementById(`${voiceNames[index]}Gain`);
    const voiceGainValue = voiceGainSlider ? voiceGainSlider.value / 100 : 0.8;
    gainNode.gain.value = voiceGainValue * 0.4;
    
    voices.push(voice);
    gainNodes.push(gainNode);
  });
  
  // Apply ADSR envelope
  const now = audioContext.currentTime + startTime;
  masterGain.gain.setValueAtTime(0, now);
  masterGain.gain.linearRampToValueAtTime(masterVolume, now + 0.05);
  masterGain.gain.linearRampToValueAtTime(masterVolume * 0.9, now + 0.1);
  masterGain.gain.linearRampToValueAtTime(masterVolume * 0.9, now + duration - 0.1);
  masterGain.gain.linearRampToValueAtTime(0, now + duration);
  
  // Start all voices
  voices.forEach(voice => {
    voice.oscillator.start(now);
    voice.oscillator.stop(now + duration);
  });
}

function play4MeasureSATB() {
  const measureDuration = 1.2; // 1.2 seconds per measure
  
  // Get all measure data
  const measures = [];
  for (let i = 1; i <= 4; i++) {
    const soprano = parseFloat(document.getElementById(`m${i}_soprano`).value);
    const alto = parseFloat(document.getElementById(`m${i}_alto`).value);
    const tenor = parseFloat(document.getElementById(`m${i}_tenor`).value);
    const bass = parseFloat(document.getElementById(`m${i}_bass`).value);
    
    measures.push({
      frequencies: [soprano, alto, tenor, bass],
      measure: i
    });
  }
  
  // Schedule all measures using Web Audio API timing
  measures.forEach((measure, index) => {
    const startTime = index * measureDuration;
    playSATB(measure.frequencies, measureDuration, startTime);
  });
  
  // Visual feedback
  document.getElementById('playSATB').style.background = '#7B1FA2';
  document.getElementById('playSATB').textContent = 'üéµ Playing...';
  
  // Reset button after playback
  setTimeout(() => {
    document.getElementById('playSATB').style.background = '#9C27B0';
    document.getElementById('playSATB').textContent = '‚ñ∂Ô∏è Play Composition';
  }, measureDuration * 4 * 1000);
}
</script>
